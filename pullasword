local GUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/BloodLetters/Ash-Libs/refs/heads/main/source.lua"))()
GUI:CreateMain({
    Name = "Ashlabs",
    title = "Pull A Sword",
    ToggleUI = "K",
    WindowIcon = "home", -- you can use lucid icons
    -- WindowHeight = 600, -- default height
    -- WindowWidth = 800, -- default width
    Theme = {
        Background = Color3.fromRGB(25, 25, 35),
        Secondary = Color3.fromRGB(35, 35, 45),
        Accent = Color3.fromRGB(138, 43, 226),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 180),
        Border = Color3.fromRGB(50, 50, 60),
        NavBackground = Color3.fromRGB(20, 20, 30)
    },
    Blur = { -- Buggy
        Enable = false, -- transparent option
        value = 0.2
    },
    Config = { -- not implemented yet
        Enabled = false,
    }
})

local main = GUI:CreateTab("Main", "user-round") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Player"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Claim Online", 
    default = false, 
    callback = function(claim)
	if claim then	
	_G.claim1 = true
	while _G.claim1 == true do
local args = {"Reward1"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward2"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward3"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward4"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward5"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward6"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward7"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward8"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward9"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward10"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward11"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
local args = {"Reward12"}
game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("ClaimGift"):FireServer(unpack(args))
task.wait(200)
end
		else
		_G.claim1 = false
           end
        print("Toggle state:", claim)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Swing Toogle", 
    default = false, 
    callback = function(swing)
	if swing then
         -- Start the loop
         _G.loopswing = true
			while _G.loopswing do
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("OnFightAttributeChange"):FireServer("AutoTrain",true)
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("SettingEventRS"):FireServer("AutoTrainer",true)
				task.wait() -- Adjust the wait time as needed
			end
      else
         -- Stop the loop
         _G.loopswing = false
      end
        print("Toggle state:", swing)
    end
})


GUI:CreateToggle({
    parent = main, 
    text = "Auto  World Boss Toogle", 
    default = false, 
    callback = function(wboss)
if wboss then
         -- Start the loop
         _G.loopwboss = true
			while _G.loopwboss do
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("StartAutoFight"):FireServer()
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("StartAutoFight"):FireServer("MegaBoss","Dragon8","Hard")
				
				task.wait() -- Adjust the wait time as needed
			end
      else
         -- Stop the loop
         _G.loopwboss = false
      end
		print("Toggle state:", wboss)
   end
})
	
GUI:CreateToggle({
    parent = main, 
    text = "Auto Buy Potion", 
    default = false, 
    callback = function(potion)
if potion then
         -- Start the loop
         _G.looppotion = true
			while _G.looppotion do
				local args = {"Buy",2,1}
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("OnStandartShopRequest"):FireServer(unpack(args))
                local args = {"Buy",2,2}
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("OnStandartShopRequest"):FireServer(unpack(args))
                local args = {"Buy",2,3}
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("OnStandartShopRequest"):FireServer(unpack(args))
                local args = {"Buy",2,4}
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("OnStandartShopRequest"):FireServer(unpack(args))
				task.wait() -- Adjust the wait time as needed
			end
      else
         -- Stop the loop
         _G.looppotion = false
      end
		print("Toggle state:", potion)
   end
})

GUI:CreateToggle({
    parent = main, 
    text = "Auto Spin Online", 
    default = false, 
    callback = function(spin)
	 if spin then
         -- Start the loop
         _G.loopspin = true
			while _G.loopspin do 
				game:GetService("ReplicatedStorage"):WaitForChild("GameClient"):WaitForChild("Events"):WaitForChild("RemoteEvent"):WaitForChild("SpaceEggEvent"):FireServer()
	            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("GetCreditsEvent"):FireServer()
				task.wait() -- Adjust the wait time as needed
			end
      else
         -- Stop the loop
         _G.loopspin = false
      end
		print("Toggle state:", spin)
   end
})

local main = GUI:CreateTab("Misc", "circle-ellipsis") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Option"
})

GUI:CreateButton({
    parent = main, 
    text = "Auto CLick", 
    callback = function()
getgenv().key = "Hostile"
loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/The-telligence/main/MC%20KSystem%202"))()
end})

GUI:CreateButton({
    parent = main, 
    text = "Anti AFK", 
    callback = function()
local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Anti AFK loaded!",
    Text = "Made by Tuuguu936",
    Button1 = "Okay",
    Duration = 5
})
end})

local main = GUI:CreateTab("World Boss", "sun") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Brick Kong"
})
GUI:CreateToggle({
    parent = main, 
    text = "Normal", 
    default = false, 
    callback = function(Normal)
      if Normal then
         -- Start the loop
         _G.loop1 = true
         while _G.loop1 do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(1)
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("WinMegaBossEvent"):FireServer("Dragon8","Normal")
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(0)
task.wait(0.1) 
         end
      else
         _G.loop1 = false
      end
	  		print("Toggle state:", Normal)
   end
})
GUI:CreateToggle({
    parent = main, 
    text = "Hard", 
    default = false, 
    callback = function(hard)
if hard then
         -- Start the loop
         _G.loop2 = true
         while _G.loop2 do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(1)
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("WinMegaBossEvent"):FireServer("Dragon8","Hard")
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(0)
task.wait() 
         end
      else
         _G.loop2 = false
      end
	  		print("Toggle state:", hard)
   end
})

GUI:CreateToggle({
    parent = main, 
    text = "Chaos", 
    default = false, 
    callback = function(chaos)
      if Chaos then
         _G.Chaos1 = true
         while _G.Chaos1 do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(1)
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("WinMegaBossEvent"):FireServer("Dragon8","Chaos")
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(0)
task.wait() 
         end
      else
         _G.Chaos1 = false
      end
	  		print("Toggle state:", chaos)
   end
})
GUI:CreateToggle({
    parent = main, 
    text = "Vortex", 
    default = false, 
    callback = function(vortex)
      if vortex then
         -- Start the loop
         _G.loop7 = true
         while _G.loop7 do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(1)
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("WinBossEvent"):FireServer("Boss8")
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(0)
task.wait(0.1) 
         end
      else
         _G.loop7 = false
      end
	  		print("Toggle state:", vortex)
   end
})
local main = GUI:CreateTab("Event", "tree-palm") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Summary "
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Swing Event", 
    default = false, 
    callback = function(swingevent)
      if swingevent then
         -- Start the loop
         _G.loop11 = true
			while _G.loop11 do
local args = {
	game:GetService("ReplicatedStorage"):WaitForChild("Items"):WaitForChild("Pencil"):WaitForChild("120"),
	false
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("ClickChangeEvent"):FireServer(unpack(args))
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("ClickEvent"):FireServer()
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnDungeonClick"):FireServer()
task.wait() -- Adjust the wait time as needed
			end
      else
         -- Stop the loop
         _G.loop11 = false
      end
	  		print("Toggle state:", swingevent)
   end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Dungeon 10", 
    default = false, 
    callback = function(Dungeon)
      if Dungeon then
         -- Start the loop
         _G.Dungeon1 = true
	while _G.Dungeon1 do
task.wait(100)
local args = {1}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(unpack(args))
local args = {"45"}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("WinEvent"):FireServer(unpack(args))
local args = {0}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("RemoveC"):FireServer(unpack(args))
end
      else
         -- Stop the loop
         _G.Dungeon1 = false
      end
	  		print("Toggle state:", Dungeon)
   end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Leave Dungeon", 
    default = false, 
    callback = function(leave)
      if leave then
         -- Start the loop
         _G.leave1 = true
			while _G.leave1 do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("Dungeon"):WaitForChild("OnLeaveDungeon"):FireServer()
				wait(25) -- Adjust the wait time as needed
			end
      else
         -- Stop the loop
         _G.leave1 = false
      end
	  		print("Toggle state:", leave)
   end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Accept", 
    default = false, 
    callback = function(msp20)
if msp20 then
        _G.msp201 = true
			while _G.msp201 == true do
task.wait(10.1)
local args = {
	"Accepted"
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("SquidGame"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
task.wait(10)
end
else
_G.msp201 = false
 end
print("Toggle state:", msp20)
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Win Green Light", 
    callback = function()
local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
rootPart.CFrame = workspace.MiniGameFolder.GreenLight.WinHitbox.CFrame
end
})


GUI:CreateButton({
    parent = main, 
    text = "Win Glass", 
    callback = function()
local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
rootPart.CFrame = workspace.MiniGameFolder.GlassBridge.End.WinHitbox.CFrame
end
})
